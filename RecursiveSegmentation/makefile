#This variable stores the name/path of the directory with all the object files will be (relative to the make file)
OBJ1_DIR=build-summing
SRC1_DIR=FunctionSumming
EXE1_NAME=funcSummer
OBJ2_DIR=build-checker
SRC2_DIR=ResultChecker
EXE2_NAME=resCheck

#this builds the project with no flags but those absolutely necessary
.PHONY: plain
plain: 
	@mkdir -p $(OBJ1_DIR)/plain
	@cd $(OBJ1_DIR)/plain; cmake -DBUILD_TYPE=Plain ../../$(SRC1_DIR); make
	@mv $(OBJ1_DIR)/plain/$(EXE1_NAME) ./$(EXE1_NAME)
	@mkdir -p $(OBJ2_DIR)/plain
	@cd $(OBJ2_DIR)/plain; cmake -DBUILD_TYPE=Plain ../../$(SRC2_DIR); make
	@mv $(OBJ2_DIR)/plain/$(EXE2_NAME) ./$(EXE2_NAME)

#this builds the project with debug flags making it easier to attach a debugger and see what is happening
.PHONY: debug
debug: 
	@mkdir -p $(OBJ1_DIR)/debug
	@cd $(OBJ1_DIR)/debug; cmake -DBUILD_TYPE=Debug ../../$(SRC1_DIR); make
	@mv $(OBJ1_DIR)/debug/$(EXE1_NAME) ./$(EXE1_NAME)
	@mkdir -p $(OBJ2_DIR)/debug
	@cd $(OBJ2_DIR)/debug; cmake -DBUILD_TYPE=Debug ../../$(SRC2_DIR); make
	@mv $(OBJ2_DIR)/debug/$(EXE2_NAME) ./$(EXE2_NAME)


#this builds the project with debug flags and with optimization flags allowing you to attach a debugger
#to see if the optimization is screwing something up
.PHONY: opt_debug
opt_debug:
	@mkdir -p $(OBJ1_DIR)/opt_debug
	@cd $(OBJ1_DIR)/opt_debug; cmake -DBUILD_TYPE=Opt_Debug ../../$(SRC1_DIR); make
	@mv $(OBJ1_DIR)/opt_debug/$(EXE1_NAME) ./$(EXE1_NAME)
	@mkdir -p $(OBJ2_DIR)/opt_debug
	@cd $(OBJ2_DIR)/opt_debug; cmake -DBUILD_TYPE=Opt_Debug ../../$(SRC2_DIR); make
	@mv $(OBJ2_DIR)/opt_debug/$(EXE2_NAME) ./$(EXE2_NAME)
	
#this builds the project with no debug flags and with optimization flags making it run faster
.PHONY: release
release:
	@mkdir -p $(OBJ1_DIR)/release
	@cd $(OBJ1_DIR)/release; cmake -DBUILD_TYPE=Release ../../$(SRC1_DIR); make
	@mv $(OBJ1_DIR)/release/$(EXE1_NAME) ./$(EXE1_NAME)
	@mkdir -p $(OBJ2_DIR)/release
	@cd $(OBJ2_DIR)/release; cmake -DBUILD_TYPE=Release ../../$(SRC2_DIR); make
	@mv $(OBJ2_DIR)/release/$(EXE2_NAME) ./$(EXE2_NAME)

#this builds the project with the generic warning flags enabled to see where you might want to make changes
.PHONY: warn
warn:
	@mkdir -p $(OBJ1_DIR)/warn
	@cd $(OBJ1_DIR)/warn; cmake -DBUILD_TYPE=Warn ../../$(SRC1_DIR); make
	@mv $(OBJ1_DIR)/warn/$(EXE1_NAME) ./$(EXE1_NAME)
	@mkdir -p $(OBJ2_DIR)/warn
	@cd $(OBJ2_DIR)/warn; cmake -DBUILD_TYPE=Warn ../../$(SRC2_DIR); make
	@mv $(OBJ2_DIR)/warn/$(EXE2_NAME) ./$(EXE2_NAME)

#this builds the project with the generic warning flags enabled to see where you might want to make changes
.PHONY: warn_opt
warn_opt:
	@mkdir -p $(OBJ1_DIR)/warn_opt
	@cd $(OBJ1_DIR)/warn_opt; cmake -DBUILD_TYPE=Warn_Opt ../../$(SRC1_DIR); make
	@mv $(OBJ1_DIR)/warn_opt/$(EXE1_NAME) ./$(EXE1_NAME)
	@mkdir -p $(OBJ2_DIR)/warn_opt
	@cd $(OBJ2_DIR)/warn_opt; cmake -DBUILD_TYPE=Warn_Opt ../../$(SRC2_DIR); make
	@mv $(OBJ2_DIR)/warn_opt/$(EXE2_NAME) ./$(EXE2_NAME)

.PHONY: everything
everything: debug plain opt_debug release warn warn_opt

#cleaning targets to remove various things generated by this make file
#this removes the contents of the build directories
.PHONY: clean
clean:
	-rm -rf $(OBJ1_DIR)
	-rm -rf $(OBJ2_DIR)

#this runs clean and then removes the executable
.PHONY: cleanall
cleanall: clean
	-rm -f $(EXE1_NAME)
	-rm -f $(EXE2_NAME)

